from __future__ import annotations

from pathlib import Path

import pytest

from swg_tool.rspconfig import (
    TreeFileRspConfigBuilder,
    TreeFileRspConfigBuilderError,
)


def test_builder_generates_expected_configuration(tmp_path: Path) -> None:
    root = tmp_path / "root"
    root.mkdir()
    custom = tmp_path / "custom"
    custom.mkdir()

    builder = TreeFileRspConfigBuilder()
    config = builder.build([
        ("Root assets", root),
        (None, custom),
    ])

    expected = "\n".join(
        [
            "# TreeFileRspBuilder_r configuration",
            "# Generated by swg-tool generate-rsp-config",
            "",
            f"# Root assets",
            f"searchPath0 = {root.resolve().as_posix()}",
            "",
            f"searchPath1 = {custom.resolve().as_posix()}",
            "",
        ]
    )

    assert config == expected


def test_builder_requires_existing_paths_by_default(tmp_path: Path) -> None:
    missing = tmp_path / "missing"
    builder = TreeFileRspConfigBuilder()

    with pytest.raises(TreeFileRspConfigBuilderError):
        builder.build([(None, missing)])


def test_builder_preserves_windows_paths_when_running_on_posix() -> None:
    builder = TreeFileRspConfigBuilder(allow_missing_paths=True)

    config = builder.build([(None, "C:/swg/live/data")])

    assert "searchPath0 = C:/swg/live/data" in config


def test_builder_write_creates_destination(tmp_path: Path) -> None:
    existing = tmp_path / "data"
    existing.mkdir()

    output = tmp_path / "configs" / "TreeFileRspBuilder.cfg"

    builder = TreeFileRspConfigBuilder()
    result = builder.write(output, [(None, existing)])

    assert result == output.resolve()
    assert output.exists()

    contents = output.read_text().splitlines()
    assert contents[-1] == f"searchPath0 = {existing.resolve().as_posix()}"
