"""Utilities for generating TreeFileRspBuilder configuration files."""

from __future__ import annotations

import os
import re
from dataclasses import dataclass
from pathlib import Path, PureWindowsPath
from typing import Iterable, List, Optional, Sequence, Tuple


class TreeFileRspConfigBuilderError(ValueError):
    """Raised when the configuration file cannot be generated."""


@dataclass(frozen=True)
class TreeFileRspConfigEntry:
    """Represents a single ``searchPath`` entry for the configuration file."""

    path: Path | str
    comment: Optional[str] = None


@dataclass(frozen=True)
class _PreparedConfigEntry:
    """Internal representation of a ``searchPath`` entry ready for rendering."""

    display_path: str
    comment: Optional[str]
    validation_path: Optional[Path]


class TreeFileRspConfigBuilder:
    """Create ``TreeFileRspBuilder.cfg`` style configuration files."""

    def __init__(
        self,
        *,
        allow_missing_paths: bool = False,
        include_header: bool = True,
    ) -> None:
        self.allow_missing_paths = allow_missing_paths
        self.include_header = include_header

    _windows_drive_pattern = re.compile(r"^[A-Za-z]:[/\\]")

    def _prepare_entry(self, path_like: Path | str, comment: Optional[str]) -> _PreparedConfigEntry:
        raw_text = os.fspath(path_like)
        expanded = Path(raw_text).expanduser()
        looks_windows = bool(self._windows_drive_pattern.match(raw_text)) or raw_text.startswith("\\\\")

        if looks_windows:
            if os.name == "nt":
                resolved = expanded.resolve(strict=False)
                display_path = PureWindowsPath(resolved).as_posix()
                validation_path: Optional[Path] = resolved
            else:
                display_path = PureWindowsPath(raw_text).as_posix()
                validation_path = None
        else:
            resolved = expanded.resolve(strict=False)
            display_path = resolved.as_posix()
            validation_path = resolved

        return _PreparedConfigEntry(
            display_path=display_path,
            comment=comment,
            validation_path=validation_path,
        )

    def _validate_entries(self, entries: Sequence[_PreparedConfigEntry]) -> None:
        if not entries:
            raise TreeFileRspConfigBuilderError(
                "At least one search path must be provided."
            )

        if self.allow_missing_paths:
            return

        missing = [
            entry.display_path
            for entry in entries
            if entry.validation_path is not None and not entry.validation_path.exists()
        ]
        if missing:
            missing_text = ", ".join(str(path) for path in missing)
            raise TreeFileRspConfigBuilderError(
                f"Search path(s) do not exist: {missing_text}"
            )

    def _render_entries(self, entries: Sequence[_PreparedConfigEntry]) -> List[str]:
        lines: List[str] = []
        for index, entry in enumerate(entries):
            if entry.comment:
                lines.append(f"# {entry.comment}")

            lines.append(f"searchPath{index} = {entry.display_path}")

            if index != len(entries) - 1:
                lines.append("")

        return lines

    def build(self, entries: Iterable[Tuple[Optional[str], Path] | TreeFileRspConfigEntry]) -> str:
        """Return the configuration file contents for the provided entries."""

        prepared_entries: List[_PreparedConfigEntry] = []
        for entry in entries:
            if isinstance(entry, TreeFileRspConfigEntry):
                prepared_entries.append(
                    self._prepare_entry(entry.path, entry.comment)
                )
            else:
                comment, path = entry
                prepared_entries.append(self._prepare_entry(path, comment))

        self._validate_entries(prepared_entries)

        lines: List[str] = []
        if self.include_header:
            lines.extend(
                [
                    "# TreeFileRspBuilder_r configuration",
                    "# Generated by swg-tool generate-rsp-config",
                    "",
                ]
            )

        lines.extend(self._render_entries(prepared_entries))

        text = "\n".join(lines)
        if not text.endswith("\n"):
            text += "\n"

        return text

    def write(
        self,
        destination: Path,
        entries: Iterable[Tuple[Optional[str], Path] | TreeFileRspConfigEntry],
    ) -> Path:
        """Write a configuration file to ``destination`` and return the path."""

        destination = Path(destination).expanduser().resolve()
        destination.parent.mkdir(parents=True, exist_ok=True)
        contents = self.build(entries)
        destination.write_text(contents, encoding="utf-8")
        return destination
